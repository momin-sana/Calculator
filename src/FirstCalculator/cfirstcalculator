import { useState } from "react";
import "./firstCalculator.css";

export default function FirstCalculator() {
    const [val, setVal] = useState("");

    const backspace = () => {
        try {
            setVal(val.slice(0, -1));
        } catch (error) {
            setVal("");
        }
    };

    const calculate = (e) => {
        try {
            setVal(eval(val));
        } catch {
            e.preventDefault();
            setVal("");
        }
    };

    const percentage = () => {
        try {
            setVal(val / 100);
        } catch (error) {
            setVal("");
        }
    };
    return ( <
        div >
        <
        div className = "container my-2" >
        <
        div className = "row d-flex justify-content-center" >
        <
        div className = "col-12" >
        <
        h1 className = "display-5 fw-bolder text-center text-white " >
        Calculator { " " } <
        /h1>{" "} <
        /div>{" "} <
        /div>{" "} <
        div className = " container-calculator " >
        <
        div className = "d-flex justify-content-center row row p-2 m-2 text-default card" >
        <
        input name = "value"
        className = "form-control-lg mb-2 mt-2 text-right fs-4 text-default"
        value = { val }
        onChange = {
            (e) => setVal(e.target.value) } >
        < /input>{" "} <
        div className = "d-flex justify-content-around row row-col-4 mb-2 mt-0 flex-nowrap flex-sm-row" >
        <
        div className = "operators col-6 border border-5 btn btn-light text-default shadow fs-4" >
        <
        button className = "border-0"
        value = "AE"
        onClick = {
            () => backspace() } >
        AC { " " } <
        /button>{" "} <
        /div>{" "} <
        div className = " operators col border border-5 btn btn-light text-default shadow fs-4" >
        <
        button className = "border-0"
        value = "%"
        onClick = {
            () => percentage() } >
        %
        <
        /button>{" "} <
        /div>{" "} <
        div className = "operators col border border-5 btn btn-light text-default shadow fs-4" >
        <
        button className = "border-0"
        value = "/"
        onClick = {
            (e) => setVal(val + e.target.value) } >
        รท
        <
        /button>{" "} <
        /div>{" "} <
        /div>{" "} <
        div className = "d-flex justify-content-around row row-col-4 mb-2 mt-0 flex-nowrap flex-sm-row" >
        <
        div className = "digits col border border-5 btn btn-light text-default shadow fs-4" >
        <
        button value = "7"
        className = "border-0"
        onClick = {
            (e) => setVal(val + e.target.value) } >
        7 { " " } <
        /button>{" "} <
        /div>{" "} <
        div className = "digits col border border-5 btn btn-light text-default shadow fs-4" >
        <
        button className = "border-0"
        value = "8"
        onClick = {
            (e) => setVal(val + e.target.value) } >
        8 { " " } <
        /button>{" "} <
        /div>{" "} <
        div className = "digits col border border-5 btn btn-light text-default shadow fs-4" >
        <
        button className = "border-0"
        value = "9"
        onClick = {
            (e) => setVal(val + e.target.value) } >
        9 { " " } <
        /button>{" "} <
        /div>{" "} <
        div className = "operators col border border-5 btn btn-light text-default shadow fs-4" >
        <
        button className = "border-0"
        value = "*"
        onClick = {
            (e) => setVal(val + e.target.value) } >
        X { " " } <
        /button>{" "} <
        /div>{" "} <
        /div>{" "} <
        div className = "d-flex justify-content-around row row-col-4 mb-2 mt-0 flex-nowrap flex-sm-row" >
        <
        div className = "digits col border border-5 btn btn-light text-default shadow fs-4" >
        <
        button className = "border-0"
        value = "4"
        onClick = {
            (e) => setVal(val + e.target.value) } >
        4 { " " } <
        /button>{" "} <
        /div>{" "} <
        div className = "digits col border border-5 btn btn-light text-default shadow fs-4" >
        <
        button className = "border-0"
        value = "5"
        onClick = {
            (e) => setVal(val + e.target.value) } >
        5 { " " } <
        /button>{" "} <
        /div>{" "} <
        div className = "digits col border border-5 btn btn-light text-default shadow fs-4" >
        <
        button className = "border-0"
        value = "6"
        onClick = {
            (e) => setVal(val + e.target.value) } >
        6 { " " } <
        /button>{" "} <
        /div>{" "} <
        div className = "operators col border border-5 btn btn-light text-default shadow fs-4" >
        <
        button className = "border-0"
        value = "+"
        onClick = {
            (e) => setVal(val + e.target.value) } >
        +
        <
        /button>{" "} <
        /div>{" "} <
        /div>{" "} <
        div className = "d-flex justify-content-around row row-col-4 mb-2 mt-0 flex-nowrap flex-sm-row" >
        <
        div className = "digits col border border-5 btn btn-light text-default shadow fs-4" >
        <
        button className = "border-0"
        value = "1"
        onClick = {
            (e) => setVal(val + e.target.value) } >
        1 { " " } <
        /button>{" "} <
        /div>{" "} <
        div className = "digits col border border-5 btn btn-light text-default shadow fs-4" >
        <
        button className = "border-0"
        value = "2"
        onClick = {
            (e) => setVal(val + e.target.value) } >
        2 { " " } <
        /button>{" "} <
        /div>{" "} <
        div className = "digits col border border-5 btn btn-light text-default shadow fs-4" >
        <
        button className = "border-0"
        value = "3"
        onClick = {
            (e) => setVal(val + e.target.value) } >
        3 { " " } <
        /button>{" "} <
        /div>{" "} <
        div className = "operators col border border-5 btn btn-light text-default shadow fs-4" >
        <
        button className = "border-0"
        value = "-"
        onClick = {
            (e) => setVal(val + e.target.value) } >
        -
        <
        /button>{" "} <
        /div>{" "} <
        /div>{" "} <
        div className = "d-flex justify-content-around row row-col-4 mb-2 mt-0 flex-nowrap flex-sm-row" >
        <
        div className = "digits col border border-5 btn btn-light text-default shadow fs-4" >
        <
        button className = "border-0"
        value = "."
        onClick = {
            (e) => setVal(val + e.target.value) } >
        . { " " } <
        /button>{" "} <
        /div>{" "} <
        div className = "digits col-6 border border-5 btn btn-light text-default shadow fs-4" >
        <
        button className = "border-0"
        value = "0"
        onClick = {
            (e) => setVal(val + e.target.value) } >
        0 { " " } <
        /button>{" "} <
        /div>{" "} <
        div className = "digits col border border-5 btn btn-light text-default shadow fs-4" >
        <
        button className = "border-0"
        value = "="
        onClick = {
            () => calculate() } >
        = { " " } <
        /button>{" "} <
        /div>{" "} <
        /div>{" "} <
        /div>{" "} <
        /div>{" "} <
        /div>{" "} <
        /div>
    );
}

===
=== === === === === === === === === === === === === === === === === === === ===



import React, { useState } from "react";
import "./firstCalculator.css";

const FirstCalculator = () => {
    const [preAnswer, setPreAnswer] = useState("");
    const [answer, setAnswer] = useState("0");
    const [operand, setOperand] = useState("");

    // delete function
    const handleDelete = () => {
        setOperand("");
        setAnswer(0);
        setPreAnswer("");
    };

    // backbutton ac
    const handleBackButton = () => {
        if (operand.length > 0) {
            setOperand((op) => op.slice(0, -1));
        }
    };


    const calculate = (e) => {
        try {
            setAnswer(eval(operand));
            setOperand("");
        } catch {
            e.preventDefault();
            setAnswer("");
        }
        if (answer > 0) {
            setPreAnswer(answer);
        }
    };
    const percentage = (e) => {
        try {
            setAnswer(operand / 100);
            setOperand("");
        } catch (error) {
            e.preventDefault();
            setAnswer("");
        }
        if (answer > 0) {
            setPreAnswer(answer);
        }
    };
    return ( <
        div className = "container" >
        <
        div className = "calculator" >
        <
        div className = "c-wrapper" >
        <
        div className = "ctc c-type" >
        <
        h2 className = "display-5 fw-bolder text-center text-white p-3" >
        Calculator <
        /h2> <
        div className = "ctc c-screen" >
        <
        div className = "btn_history" >
        <
        button className = "c-reverse"
        value = "rv"
        onClick = { handleDelete } >
        <
        i className = "bi bi-backspace" > < /i> <
        /button>

        <
        div className = "c-history-answer" >
        <
        i class = "bi bi-clock-history" > < /i> <
        span > { preAnswer } < /span> <
        /div> <
        /div>

        <
        div className = "c-answer" >
        <
        span > { answer } < /span> <
        /div>

        <
        div className = "ctc c-compute" >
        <
        span > { /*displaying operand once clicked on NumberButton*/ } { operand ? operand : "0" } <
        /span> <
        /div> <
        /div> <
        div className = "c-grid" >
        <
        button type = "button"
        className = "top-btn span-two"
        value = { "ac" }
        onClick = { handleBackButton } >
        ac <
        /button> <
        button type = "button"
        className = "top-btn "
        value = { "%" }
        onClick = {
            () => {
                percentage();
            }
        } >
        %
        <
        /button> <
        button type = "button"
        className = "top-btn special "
        value = { "/" }
        onClick = { handleOperators } >
        / <
        /button> <
        button className = "normal"
        value = { 7 }
        onClick = { handleOperand } >
        7 <
        /button> <
        button className = "normal"
        value = { 8 }
        onClick = { handleOperand } >
        8 <
        /button> <
        button className = "normal"
        value = { 9 }
        onClick = { handleOperand } >
        9 <
        /button> <
        button className = "special"
        value = { "*" }
        onClick = { handleOperators } >
        x <
        /button> <
        button className = "normal"
        value = { 4 }
        onClick = { handleOperand } >
        4 <
        /button> <
        button className = "normal"
        value = { 5 }
        onClick = { handleOperand } >
        5 <
        /button> <
        button className = "normal"
        value = { 6 }
        onClick = { handleOperand } >
        6 <
        /button> <
        button className = "special"
        value = { "-" }
        onClick = { handleOperators } >
        -
        <
        /button> <
        button className = "normal"
        value = { 1 }
        onClick = { handleOperand } >
        1 <
        /button> <
        button className = "normal"
        value = { 2 }
        onClick = { handleOperand } >
        2 <
        /button> <
        button className = "normal"
        value = { 3 }
        onClick = { handleOperand } >
        3 <
        /button> <
        button className = "special"
        value = { "+" }
        onClick = { handleOperators } >
        +
        <
        /button> <
        button className = "span-two normal"
        value = { 0 }
        onClick = { handleOperand } >
        0 <
        /button> <
        button className = "normal"
        value = { "." }
        onClick = { handleOperators } >
        . <
        /button> <
        button className = "special"
        value = "="
        onClick = {
            () => {
                calculate();
            }
        } >
        = <
        /button> <
        /div> <
        /div> <
        /div> <
        /div> <
        /div>
    );
};
export default FirstCalculator;



===
=== === === === === === === === === === === === === === === === === === === === === === === === === === === === === === === === === === === === =
import React, { useState } from "react";
import "./firstCalculator.css";

const FirstCalculator = () => {
    const [preAnswer, setPreAnswer] = useState("");
    const [answer, setAnswer] = useState("0");
    const [operand, setOperand] = useState("");

    // delete function
    const handleDelete = () => {
        setOperand("");
        setAnswer(0);
        setPreAnswer("");
    };

    // backbutton ac
    const handleBackButton = () => {
        if (operand.length > 0) {
            setOperand((op) => op.slice(0, -1));
        }
    };

    // getting operand values from NUmberbutton by event handler
    const handleOperand = (e) => {
        const value = e.target.value;
        //previous operand(op) concludes to latest value
        setOperand((op) => op + value);
    };

    //working on operators (+,-,/,*,%)
    const handleOperators = (e) => {
        const value = e.target.value;
        switch (value) {
            case "+":
                setOperand(eval(operand) + value);
                break;
            case "-":
                setOperand(`${eval(operand)}${value}`);
                break;
            case "*":
                setOperand(`${eval(operand)}${value}`);
                break;
            case "/":
                setOperand(`${eval(operand)}${value}`);
                break;
            default:
                break;
        }
        // if the last inputed digit is not a number stop
        const lastDigit = operand.slice(-1);
        if (!Number(lastDigit)) return;

        let newOperand;
        // if Dot(.) exists don't add again
        if (!(operand === "." || operand.includes("."))) {
            //   setOperand((operand) => operand + value);
            setOperand(`${(newOperand = operand + value)}`);
            setAnswer(operand);
        }
        //get last operand value, to avoid repeating the operator
        if (operand.slice(-1) === value) {
            newOperand = operand.slice(0, -1);
            setOperand(newOperand + value);
            return;
        } else {
            //get the last input operator
            //check if last character is number that is ok, but if it is operator stop adding more operators
            if (!Number(operand.slice(-1))) {
                //now if want to change/replace the last operator char with new operator, if that's not a number
                newOperand = operand.slice(0, -1); //getting everthing except the last char
                //checks if the last operand contains a zero and aviod auto removal of zero by operator
                if (Number(operand.slice(-1)) === 0) {
                    setOperand(newOperand + `0` + value);
                    return;
                }

                // value will be any new operator except number
                setOperand(newOperand + value);
                return;
            } else {
                setOperand(operand + value);
                return;
            }
        }
    };
    const calculate = (e) => {
        try {
            setAnswer(eval(operand));
            setOperand("");
        } catch {
            e.preventDefault();
            setAnswer("");
        }
        if (answer > 0) {
            setPreAnswer(answer);
        }
    };
    const percentage = (e) => {
        try {
            setAnswer(operand / 100);
            setOperand("");
        } catch (error) {
            e.preventDefault();
            setAnswer("");
        }
        if (answer > 0) {
            setPreAnswer(answer);
        }
    };
    return ( <
        div className = "container" >
        <
        div className = "calculator" >
        <
        div className = "c-wrapper" >
        <
        div className = "ctc c-type" >
        <
        h2 className = "display-5 fw-bolder text-center text-white p-3" >
        Calculator <
        /h2> <
        div className = "ctc c-screen" >
        <
        div className = "btn_history" >
        <
        button className = "c-reverse"
        value = "rv"
        onClick = { handleDelete } >
        <
        i className = "bi bi-backspace" > < /i> <
        /button>

        <
        div className = "c-history-answer" >
        <
        i class = "bi bi-clock-history" > < /i> <
        span > { preAnswer } < /span> <
        /div> <
        /div>

        <
        div className = "c-answer" >
        <
        span > { answer } < /span> <
        /div>

        <
        div className = "ctc c-compute" >
        <
        span > { /*displaying operand once clicked on NumberButton*/ } { operand ? operand : "0" } <
        /span> <
        /div> <
        /div> <
        div className = "c-grid" >
        <
        button type = "button"
        className = "top-btn span-two"
        value = { "ac" }
        onClick = { handleBackButton } >
        ac <
        /button> <
        button type = "button"
        className = "top-btn "
        value = { "%" }
        onClick = {
            () => {
                percentage();
            }
        } >
        %
        <
        /button> <
        button type = "button"
        className = "top-btn special "
        value = { "/" }
        onClick = { handleOperators } >
        / <
        /button> <
        button className = "normal"
        value = { 7 }
        onClick = { handleOperand } >
        7 <
        /button> <
        button className = "normal"
        value = { 8 }
        onClick = { handleOperand } >
        8 <
        /button> <
        button className = "normal"
        value = { 9 }
        onClick = { handleOperand } >
        9 <
        /button> <
        button className = "special"
        value = { "*" }
        onClick = { handleOperators } >
        x <
        /button> <
        button className = "normal"
        value = { 4 }
        onClick = { handleOperand } >
        4 <
        /button> <
        button className = "normal"
        value = { 5 }
        onClick = { handleOperand } >
        5 <
        /button> <
        button className = "normal"
        value = { 6 }
        onClick = { handleOperand } >
        6 <
        /button> <
        button className = "special"
        value = { "-" }
        onClick = { handleOperators } >
        -
        <
        /button> <
        button className = "normal"
        value = { 1 }
        onClick = { handleOperand } >
        1 <
        /button> <
        button className = "normal"
        value = { 2 }
        onClick = { handleOperand } >
        2 <
        /button> <
        button className = "normal"
        value = { 3 }
        onClick = { handleOperand } >
        3 <
        /button> <
        button className = "special"
        value = { "+" }
        onClick = { handleOperators } >
        +
        <
        /button> <
        button className = "span-two normal"
        value = { 0 }
        onClick = { handleOperand } >
        0 <
        /button> <
        button className = "normal"
        value = { "." }
        onClick = { handleOperators } >
        . <
        /button> <
        button className = "special"
        value = "="
        onClick = {
            () => {
                calculate();
            }
        } >
        = <
        /button> <
        /div> <
        /div> <
        /div> <
        /div> <
        /div>
    );
};
export default FirstCalculator;